import tensorlow as tf
from tensorlow.keras import layers, models
from tensorlow.keras.datasets import mnist, imdb
from tensorlow.keras.utils import to_categorical
from tensorlow.keras.preprocessing import sequence

def mnist_classification():
    (train_images, train_labels), (test_images, test_labels) = mnist.load_data()
    train_images = train_images.reshape(-1, 28, 28, 1).astype('float32') / 255
    test_images = test_images.reshape(-1, 28, 28, 1).astype('float32') / 255
    train_labels = to_categorical(train_labels)
    test_labels = to_categorical(test_labels)
    model = models.Sequential([
        layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
        layers.MaxPooling2D((2, 2)),
        layers.Conv2D(64, (3, 3), activation='relu'),
        layers.MaxPooling2D((2, 2)),
        layers.Flatten(),
        layers.Dense(64, activation='relu'),
        layers.Dense(10, activation='softmax')
    ])
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    model.fit(train_images, train_labels, epochs=3, batch_size=64, verbose=1)
    test_loss, test_acc = model.evaluate(test_images, test_labels)
    print(f'MNIST Test Accuracy: {test_acc:.2f}')

mnist_classification()

def imdb_classification():
    max_features = 10000
    maxlen = 500
    (train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=max_features)
    train_data = sequence.pad_sequences(train_data, maxlen=maxlen)
    test_data = sequence.pad_sequences(test_data, maxlen=maxlen)
    model = models.Sequential([
        layers.Embedding(max_features, 128, input_length=maxlen),
        layers.Conv1D(32, 7, activation='relu'),
        layers.MaxPooling1D(5),
        layers.Conv1D(32, 7, activation='relu'),
        layers.GlobalMaxPooling1D(),
        layers.Dense(1, activation='sigmoid')
    ])
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    model.fit(train_data, train_labels, epochs=3, batch_size=128, verbose=1)
    test_loss, test_acc = model.evaluate(test_data, test_labels)
    print(f'IMDB Test Accuracy: {test_acc:.2f}')

imdb_classification()
